// # Вопросы по теме "Дополнительные директивы Dockerfile"

$CATEGORY: 06_dockerfile_ii/1_knowledge

::06k001:: [markdown] Чтобы задать переменную окружения в образе контейнера, используется директива{
    =[markdown] `ENV`
    ~[markdown] `ARG`
    ~[markdown] `VAR`
    ~[markdown] `VARIABLE`
}

::06k002:: [markdown] Для задания аргумента сборки, который можно использовать во время сборки образа, используется директива
{
    =[markdown] `ARG`
    ~[markdown] `ENV`
    ~[markdown] `BUILD_ARG`
    ~[markdown] `VAR`
}

::06k003:: [markdown] Чтобы открыть порт контейнера, используется директива
{
    =[markdown] `EXPOSE`
    ~[markdown] `PORT`
    ~[markdown] `OPEN`
    ~[markdown] `PUBLISH`
}

::06k004:: [markdown] Для указания точки монтирования тома в контейнере используется директива
{
    =[markdown] `VOLUME`
    ~[markdown] `MOUNT`
    ~[markdown] `MOUNTPOINT`
    ~[markdown] `MOUNTVOLUME`
}

::06k005:: [markdown] Метаданные образа можно задать с помощью директивы
{
    =[markdown] `LABEL`
    ~[markdown] `META`
    ~[markdown] `METADATA`
    ~[markdown] `COMMENT`
}

::06k006:: [markdown] Сменить командную оболочку по умолчанию в образе можно с помощью директивы
{
    =[markdown] `SHELL`
    ~[markdown] `CMD`
    ~[markdown] `SH`
    ~[markdown] `BASH`
}

::06k007:: [markdown] Проверить работу образа можно с помощью директивы
{
    =[markdown] `HEALTHCHECK`
    ~[markdown] `CHECK`
    ~[markdown] `TEST`
    ~[markdown] `VERIFY`
}

::06k008:: [markdown] Задать аргумент `DEBIAN_VERSION` сборки в Dockerfile можно следующим образом
{
    =[markdown] `ARG DEBIAN_VERSION`
    ~[markdown] `ENV DEBIAN_VERSION`
    ~[markdown] `VAR DEBIAN_VERSION`
    ~[markdown] `SET DEBIAN_VERSION`
}

::06k009:: [markdown] Задать переменную окружения `DEBIAN_VERSION` в Dockerfile можно следующим образом
{
    =[markdown] `ENV DEBIAN_VERSION`
    ~[markdown] `ARG DEBIAN_VERSION`
    ~[markdown] `VAR DEBIAN_VERSION`
    ~[markdown] `SET DEBIAN_VERSION`
}

::06k010:: [markdown] Определить аргумент сборки `DEBIAN_VERSION` со значением `10` при сборке образа `myimage`, нужно использовать команду
{
    =[markdown] `docker build --build-arg DEBIAN_VERSION=10 -t myimage .`
    ~[markdown] `docker build -e DEBIAN_VERSION=10 -t myimage .`
    ~[markdown] `docker build --arg DEBIAN_VERSION=10 -t myimage .`
    ~[markdown] `docker build --build-env DEBIAN_VERSION=10 -t myimage .`
}

::06k011:: [markdown] Задать аргумент `BUILD` сборки в Dockerfile можно следующим образом
{
    =[markdown] `ARG BUILD`
    ~[markdown] `ENV BUILD`
    ~[markdown] `VAR BUILD`
    ~[markdown] `SET BUILD`
}

::06k012:: [markdown] Задать аргумент `BASE_IMAGE` сборки в Dockerfile можно следующим образом
{
    =[markdown] `ARG BASE_IMAGE`
    ~[markdown] `ENV BASE_IMAGE`
    ~[markdown] `VAR BASE_IMAGE`
    ~[markdown] `SET BASE_IMAGE`
}

::06k013:: [markdown] Задать переменную окружения `TIMEZONE` в Dockerfile можно следующим образом
{
    =[markdown] `ENV TIMEZONE`
    ~[markdown] `ARG TIMEZONE`
    ~[markdown] `VAR TIMEZONE`
    ~[markdown] `SET TIMEZONE`
}

::06k014:: [markdown] Задать переменную окружения `MYSQL_PASSWORD` в Dockerfile можно следующим образом
{
    =[markdown] `ENV MYSQL_PASSWORD`
    ~[markdown] `ARG MYSQL_PASSWORD`
    ~[markdown] `VAR MYSQL_PASSWORD`
    ~[markdown] `SET MYSQL_PASSWORD`
}

//Вопросы типа _"короткий ответ"_:
$CATEGORY: 06_dockerfile_ii/2_usage

::06u001:: [markdown] Чтобы задать аргумент сборки `UBUNTU_VERSION` со значением `20.04`, нужно добавить в Dockerfile следующую строку {=ARG UBUNTU_VERSION\=20.04}

::06u002:: [markdown] Чтобы задать аргумент сборки `APP_DIR` со значением `/usr/src/app`, нужно добавить в Dockerfile следующую строку {=ARG APP_DIR\=/usr/src/app}

::06u003:: [markdown] Чтобы задать переменную окружения `APP_DIR` со значением `/usr/src/app`, нужно добавить в Dockerfile следующую строку{=ENV APP_DIR\=/usr/src/app}

::06u004:: [markdown] Чтобы задать переменную окружения `UBUNTU_VERSION` со значением `20.04`, нужно добавить в Dockerfile следующую строку{=ENV UBUNTU_VERSION\=20.04}

::06u005:: [markdown] Чтобы определить аргумент сборки `UBUNTU_VERSION` со значением `20.04` при сборке образа `myimage`, нужно использовать команду{=docker build --build-arg UBUNTU_VERSION\=20.04 -t myimage . =docker build -t myimage --build-arg UBUNTU_VERSION\=20.04 .}

::06u006:: [markdown] Чтобы определить аргумент сборки `APP_DIR` со значением `/usr/src/app` при сборке образа `myimage`, нужно использовать команду {=docker build --build-arg APP_DIR\=/usr/src/app -t myimage . =docker build -t myimage --build-arg APP_DIR\=/usr/src/app .}

::06u007:: [markdown] В Dockerfile определена переменная окружения `UBUNTU_VERSION`. Напишите директиву, которая выведет значение этой переменной во время сборки образа в файл `/version.txt`. {=RUN echo $UBUNTU_VERSION > /version.txt =RUN echo "$UBUNTU_VERSION" > /version.txt =RUN echo $\{UBUNTU_VERSION\} > /version.txt}

::06u008:: [markdown] В Dockerfile определён аргумент сборки `UBUNTU_VERSION`. Напишите директиву, которая определит переменную окружения `UBUNTU_VERSION` со значением аргумента сборки.{=ENV UBUNTU_VERSION=$UBUNTU_VERSION\=ENV UBUNTU_VERSION=$\{UBUNTU_VERSION\}=ENV UBUNTU_VERSION\="$UBUNTU_VERSION"}

::06u009:: [markdown] В Dockerfile определён аргумент сборки `UBUNTU_VERSION`. Напишите директиву, которая определяет создание образа на базе образа `ubuntu` с использованием аргумента сборки `UBUNTU_VERSION`. {=FROM ubuntu\:$UBUNTU_VERSION=FROM ubuntu\:$\{UBUNTU_VERSION\}}

::06u010:: [markdown] Чтобы открыть порт `80` в контейнере, нужно добавить в Dockerfile следующую строку{=EXPOSE 80}

::06u011:: [markdown] Чтобы открыть порт `8080` в контейнере, нужно добавить в Dockerfile следующую строку{=EXPOSE 8080}

::06u012:: [markdown] Чтобы пробросить порт `80` контейнера на порт `8080` хоста при создании и запуске контейнера с образом `myimage`, нужно использовать команду{=docker run -p 8080\:80 myimage}

::06u013:: [markdown] Чтобы определить точку монтирования тома к каталогу `/data` в контейнере, нужно добавить в Dockerfile следующую строку{=VOLUME /data}

::06u014:: [markdown] Чтобы определить точку монтирования тома к каталогу `/var/lib/mysql` в контейнере, нужно добавить в Dockerfile следующую строку{=VOLUME /var/lib/mysql}

::06u015:: [markdown] Чтобы задать метаданные образа `maintainer` со значением `Gicu Stirbu`, нужно добавить в Dockerfile следующую строку{=LABEL maintainer\="Gicu Stirbu"=LABEL maintainer\=Gicu Stirbu}

::06u016:: [markdown] Чтобы задать метаданные образа `version` со значением `1.0`, нужно добавить в Dockerfile следующую строку{=LABEL version\="1.0"=LABEL version\=1.0}
